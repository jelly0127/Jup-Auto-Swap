/* tslint:disable */
/* eslint-disable */
/**
 * Jupiter Api v6
 * The core of [jup.ag](https://jup.ag). Easily get a quote and swap through Jupiter API.  # Rate limits The rate limits is 45 requests / 10 seconds. If you need a higher rate limits, feel free to contact us on [#developer-support](https://discord.com/channels/897540204506775583/910250162402779146) on discord.  # API Wrapper - Typescript [@jup-ag/api](https://github.com/jup-ag/jupiter-quote-api-node) - more to come... 
 *
 * The version of the OpenAPI document: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuoteResponseV2 } from './QuoteResponseV2';
import {
    QuoteResponseV2FromJSON,
    QuoteResponseV2FromJSONTyped,
    QuoteResponseV2ToJSON,
} from './QuoteResponseV2';
import type { SwapRequestComputeUnitPriceMicroLamports } from './SwapRequestComputeUnitPriceMicroLamports';
import {
    SwapRequestComputeUnitPriceMicroLamportsFromJSON,
    SwapRequestComputeUnitPriceMicroLamportsFromJSONTyped,
    SwapRequestComputeUnitPriceMicroLamportsToJSON,
} from './SwapRequestComputeUnitPriceMicroLamports';

/**
 * 
 * @export
 * @interface SwapRequest
 */
export interface SwapRequest {
    /**
     * 
     * @type {string}
     * @memberof SwapRequest
     */
    userPublicKey: string;
    /**
     * 
     * @type {QuoteResponseV2}
     * @memberof SwapRequest
     */
    quoteResponse: QuoteResponseV2;
    /**
     * 
     * @type {boolean}
     * @memberof SwapRequest
     */
    wrapAndUnwrapSol?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SwapRequest
     */
    useSharedAccounts?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SwapRequest
     */
    feeAccount?: string;
    /**
     * 
     * @type {SwapRequestComputeUnitPriceMicroLamports}
     * @memberof SwapRequest
     */
    computeUnitPriceMicroLamports?: SwapRequestComputeUnitPriceMicroLamports;
}

/**
 * Check if a given object implements the SwapRequest interface.
 */
export function instanceOfSwapRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userPublicKey" in value;
    isInstance = isInstance && "quoteResponse" in value;

    return isInstance;
}

export function SwapRequestFromJSON(json: any): SwapRequest {
    return SwapRequestFromJSONTyped(json, false);
}

export function SwapRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userPublicKey': json['userPublicKey'],
        'quoteResponse': QuoteResponseV2FromJSON(json['quoteResponse']),
        'wrapAndUnwrapSol': !exists(json, 'wrapAndUnwrapSol') ? undefined : json['wrapAndUnwrapSol'],
        'useSharedAccounts': !exists(json, 'useSharedAccounts') ? undefined : json['useSharedAccounts'],
        'feeAccount': !exists(json, 'feeAccount') ? undefined : json['feeAccount'],
        'computeUnitPriceMicroLamports': !exists(json, 'computeUnitPriceMicroLamports') ? undefined : SwapRequestComputeUnitPriceMicroLamportsFromJSON(json['computeUnitPriceMicroLamports']),
    };
}

export function SwapRequestToJSON(value?: SwapRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userPublicKey': value.userPublicKey,
        'quoteResponse': QuoteResponseV2ToJSON(value.quoteResponse),
        'wrapAndUnwrapSol': value.wrapAndUnwrapSol,
        'useSharedAccounts': value.useSharedAccounts,
        'feeAccount': value.feeAccount,
        'computeUnitPriceMicroLamports': SwapRequestComputeUnitPriceMicroLamportsToJSON(value.computeUnitPriceMicroLamports),
    };
}

